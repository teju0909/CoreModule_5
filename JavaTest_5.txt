Q1.What is Exception in Java?
Ans:
An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions. When an error occurs within a method, the method creates an object and hands it off to the runtime system.

Types Of Exceptions:

A=> User-Defined Exception

B=> Built-in Exception
    1=> Checked Exceptions
		->ClassNotFoundException
		->InterruptedException
		->IOException
		->InstantionException
		->SQLException
		->FileNotFoundException

    2=>Unchecked Exceprions
		->ArthmeticException
		->ClassCastException
		->NullPointerException
		->ArrayIndexOutOfBoundsException
		->ArraysStoreException
		->IllegalThreadStateException

======================================================================================================================================================================
Q2.What is Exception Handling?
Ans:
	Exceptions occur for numerous reasons, including invalid user input, code errors, device failure, the loss of a network connection, insufficient memory to run 		an application, a memory conflict with another program, a program attempting to divide by zero or a user attempting to open files that are unavailable.
	When an exception occurs, specialized programming language constructs, interrupt hardware mechanisms or operating system interprocess communication facilities 		handle the exception.
		
	Exception handling differs from error handling in that the former involves conditions an application might catch versus serious problems an application might 		want to avoid. In contrast, error handling helps maintain the normal flow of software program execution.

	Java provides five keywords that are used to handle the exception. The following table describes each

	1.try: The "try" keyword is used to specify a block where we should place an exception code. It means we can't use try block alone. The try block must be 		followed by either catch or finally.

	2.catch: The "catch" block is used to handle the exception. It must be preceded by try block which means we can't use catch block alone. It can be followed by 		finally block later.

	3.finally: The "finally" block is used to execute the necessary code of the program. It is executed whether an exception is handled or not.

	4.throw: The "throw" keyword is used to throw an exception.

	5.throws: The "throws" keyword is used to declare exceptions. It specifies that there may occur an exception in the method. It doesn't throw an exception. It 		is always used with method signature.

======================================================================================================================================================================

Q3.What is the difference between Checked and Unchecked Exceptions and Error?
Ans:
Checked Exception
=================
	1.Checked exceptions occur at compile time.
	2.The compiler checks a checked exception.
	3.These types of exceptions can be handled at the time of compilation.
	4.They are the sub-class of the exception class.
	5.Here, the JVM needs the exception to catch and handle.

	Examples of Checked exceptions:
	-File Not Found Exception
	-No Such Field Exception
	-Interrupted Exception
	-No Such Method Exception
	-Class Not Found Exception

Unchecked Exception
===================
	1.Unchecked exceptions occur at runtime.
	2.The compiler does not check these types of exceptions.
	3.These types of exceptions cannot be a catch or handle at the time of compilation, because they get generated by the mistakes in the program.
	4.They are runtime exceptions and hence are not a part of the Exception class.
	5.Here, the JVM does not require the exception to catch and handle.

	Examples of Unchecked Exceptions:
	-No Such Element Exception
	-Undeclared Throwable Exception
	-Empty Stack Exception
	-Arithmetic Exception
	-Null Pointer Exception
	-Array Index Out of Bounds Exception
	-Security Exception
======================================================================================================================================================================

Q4.What are the difference between throw and throws in Java?
Ans:
throw
=====
	1.The throw keyword is used inside a function. It is used when it is required to throw an Exception logically.
	2.The throw keyword is used to throw an exception explicitly. It can throw only one exception at a time.
	3.Syntax of throw keyword includes the instance of the Exception to be thrown. Syntax wise throw keyword is followed by the instance variable.
	4.throw keyword cannot propagate checked exceptions. It is only used to propagate the unchecked Exceptions that are not checked using the throws keyword. 

throws 
=======
	1.The throws keyword is used in the function signature. It is used when the function has some statements that can lead to exceptions.
	2.The throws keyword can be used to declare multiple exceptions, separated by a comma. Whichever exception occurs, if matched with the declared ones, is thrown 	automatically then.
	3.Syntax of throws keyword includes the class names of the Exceptions to be thrown. Syntax wise throws keyword is followed by exception class names.
	4.throws keyword is used to propagate the checked Exceptions only. 

======================================================================================================================================================================

Q5.What is multithreading in Java? mention its advantages
Ans: 

	Multithreading in Java is a process of executing multiple threads simultaneously.
	A thread is a lightweight sub-process, the smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.
	However, we use multithreading than multiprocessing because threads use a shared memory area. They don't allocate separate memory area so saves memory, and 	context-switching between the threads takes less time than process.

	Java Multithreading is mostly used in games, animation, etc.

	Advantages of Java Multithreading:

	1) It doesn't block the user because threads are independent and you can perform multiple operations at the same time.

	2) You can perform many operations together, so it saves time.

	3) Threads are independent, so it doesn't affect other threads if an exception occurs in a single thread.

======================================================================================================================================================================

Q6.Write a program to create and call a custom exception
Ans: 


package in.ineurion;

class CustomException extends Exception {

    public CustomException(String message) {
        super(message);
    }
}

public class MyException{

    public static void main(String[] args) {
        try {
            throw new CustomException("This is my custom exception.");
        } catch (CustomException e) {
            System.out.println(e.getMessage());
        }
    }
}

======================================================================================================================================================================

Q7.How can you handle exceptions in Java? 
Ans:

There are two ways to handle exceptions in Java:

Try-catch-finally:
==================
	This is the most common way to handle exceptions. It consists of three blocks:
	The try block contains the code that might throw an exception.
	The catch block is used to handle the exception.
	The finally block is executed whether an exception is thrown or not.

Try-with-resources: 
===================
	This is a newer way to handle exceptions. It is used to close resources that are opened in the try block.
	Here is an example of how to handle exceptions in Java using the try-catch-finally block:

EX: 
		try {
   			 // Code that might throw an exception
		} catch (Exception e) {
  			  // Handle the exception
		} finally {
    			// Code that is executed regardless of whether an exception is thrown
		}

Here is an example of how to handle exceptions in Java using the try-with-resources block:

		try (
    			// Resources that are opened in the try block
		    ) {
   			 // Code that might throw an exception
		} catch (Exception e) {
    			// Handle the exception
		}

	The try-with-resources block is a more concise way to handle exceptions. It is also more efficient, because it automatically closes the resources that are 	opened in the block.

	Here are some point for handling exceptions in Java:

	Always use a try-catch-finally block when you are working with code that might throw an exception. This will help you to prevent your program from crashing if 		an exception is thrown.
	Use specific exception types in your catch blocks. This will help you to handle the exception more effectively.
	Log the exception to a file or database. This will help you to track down the source of the exception.
	Provide a user-friendly message to the user if an exception is thrown. This will help the user to understand why the exception occurred.
	By following these points, we can write Java programs that are more robust and handle exceptions effectively.

======================================================================================================================================================================

Q8.What is Thread in Java?
Ans:

	A thread in Java is a lightweight process that can run concurrently with other threads. Threads share the same memory space, but they have their own call stack 	and registers. This allows threads to execute different parts of a program at the same time, which can improve the performance of the program.

	There are two ways to create a thread in Java:

	1.Extend the Thread class:
	==========================
	This is the most common way to create a thread. To do this, you need to create a class that extends the Thread class. The Thread class provides a number of 	methods that you can use to control the thread, such as the start() method, which starts the thread, and the join() method, which waits for the thread to 	finish.

	Eg.

	class MyThread extends Thread {

    	public void run() {
       	 // This is the code that will be executed by the thread
    	}
	}

	public class Main {

   	 public static void main(String[] args) {
      	  MyThread thread = new MyThread();
       	  thread.start();
   	 }
	}


	2.Implement the Runnable interface:
	====================================

	This is another way to create a thread. To do this, you need to create a class that implements the Runnable interface. The Runnable interface has a single 	method called run(). When you start a thread that implements the Runnable interface, the run() method is executed.

	Eg.

	class MyRunnable implements Runnable {

    	public void run() {
        	// This is the code that will be executed by the thread
    	}
	}

	public class Main {

   	 public static void main(String[] args) {
        	Thread thread = new Thread(new MyRunnable());
        	thread.start();
    	}
	}

======================================================================================================================================================================

Q9. What are the two ways of implementing thread in Java?
Ans:

	There are two ways to implement a thread in Java:

	1.Extending the Thread class:
	==========================
	This is the most common way to create a thread. To do this, you need to create a class that extends the Thread class. The Thread class provides a number of 	methods that you can use to control the thread, such as the start() method, which starts the thread, and the join() method, which waits for the thread to 	finish.

	Eg.

	class MyThread extends Thread {

    	public void run() {
       	 // This is the code that will be executed by the thread
    	}
	}

	public class Main {

   	 public static void main(String[] args) {
      	  MyThread thread = new MyThread();
       	  thread.start();
   	 }
	}


	2.Implementing the Runnable interface:
	======================================
	This is another way to create a thread. To do this, you need to create a class that implements the Runnable interface. The Runnable interface has a single 	method called run(). When you start a thread that implements the Runnable interface, the run() method is executed.


	Eg.

	class MyThread extends Thread {

    	public void run() {
       	 // This is the code that will be executed by the thread
    	}
	}

	public class Main {

   	 public static void main(String[] args) {
      	  MyThread thread = new MyThread();
       	  thread.start();
   	 }
	}

======================================================================================================================================================================

Q10.What do you mean by garbage collection?
Ans: 

	Garbage collection (GC) in Java is the process of automatically reclaiming the memory that is no longer being used by an object. This is done by the garbage 	collector, which is a part of the Java Virtual Machine (JVM).
	
	In Java, objects are created on the heap, which is a region of memory that is used to store objects that are created by the program. When an object is no 	longer needed, it is said to be garbage. The garbage collector periodically scans the heap for garbage objects and reclaims the memory that they are using.

	Garbage collection is a very important part of Java memory management. It allows programmers to focus on writing their code without having to worry about 	manually managing memory.

	Here are some of the benefits of garbage collection in Java:

	Memory safety: 
		Garbage collection ensures that memory is never leaked, which can lead to memory errors.
	Simplified memory management: 
		Programmers do not need to worry about manually managing memory, which can free up their time to focus on other aspects of their code.
	Improved performance:
		 Garbage collection can improve the performance of a program by freeing up memory that is no longer being used.

	However, there are also some drawbacks to garbage collection in Java:

	GC overhead:
		 Garbage collection can add some overhead to a program, which can reduce its performance.
	Unpredictable GC pauses:
		 Garbage collection can cause pauses in the execution of a program, which can be unpredictable.
	GC-related errors: 
		Garbage collection can sometimes lead to errors, such as OutOfMemoryError.
	
	Overall, garbage collection is a very important part of Java memory management. It provides a number of benefits, but it also has some drawbacks. Programmers 	should be aware of both the benefits and drawbacks of garbage collection when writing Java code.

======================================================================================================================================================================





















